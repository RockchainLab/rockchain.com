@mixin columns-count ($col-count: 2, $col-gap: 30px){
	-moz-column-count: $col-count;
	-webkit-column-count: $col-count;
	column-count: $col-count;	
	-moz-column-gap: $col-gap;
	-webkit-column-gap: $col-gap;
	column-gap: $col-gap;
}

@mixin greyscale($amount: 100%){
  -webkit-filter: grayscale($amount);
  -moz-filter: grayscale($amount);
  -o-filter: grayscale($amount);
  -ms-filter: grayscale($amount);
  filter: grayscale($amount);
}

/* Triangles */

@mixin triangle-top($size:10px, $color:#000){
  width: 0;
  height: 0;
  border-left: $size solid transparent;
  border-right: $size solid transparent;
  border-bottom: $size solid $color;
}

@mixin triangle-down($size:10px, $color:#000){
  width: 0;
  height: 0;
  border-left: $size solid transparent;
  border-right: $size solid transparent;
  border-top: $size solid $color;
}

@mixin triangle-right($size:10px, $color:#000){
  width: 0;
  height: 0;
  border-top: $size solid transparent;
  border-bottom: $size solid transparent;
  border-left: $size solid $color;
}

@mixin triangle-left($size:10px, $color:#000){
  width: 0;
  height: 0;
  border-top: $size solid transparent;
  border-bottom: $size solid transparent;
  border-right: $size solid $color;
}

@mixin triangle-bottom-right($size:10px, $color:#000){
  width: 0;
  height: 0;
  border-left: $size solid transparent;
  border-bottom: $size solid $color;
}

@mixin triangle-bottom-left($size:10px, $color:#000){
  width: 0;
  height: 0;
  border-right: $size solid transparent;
  border-bottom: $size solid $color;
}

@mixin triangle-top-right($size:10px, $color:#000){
  width: 0;
  height: 0;
  border-left: $size solid transparent;
  border-top: $size solid $color;
}

@mixin triangle-top-left($size:10px, $color:#000){
  width: 0;
  height: 0;
  border-right: $size solid transparent;
  border-top: $size solid $color;
}

/* Text */

@mixin no-text-select{
  -webkit-touch-callout: none;
  -webkit-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  user-select: none;
}

@function px($value){
  @return ($value / 16) * 1rem;
}

@mixin ellipsis{
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

@mixin no-wrap{
  white-space: nowrap;
}

@mixin reset-select{
  -webkit-appearance: none;
  -moz-appearance: none;
  appearance: none;
}

/* Mixins */

@mixin clearfix{
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

/* Retina */

@mixin retina($bg_color, $image_url, $bg_repeat, $x_pos, $y_pos, $image_url2, $img_width, $img_height){
  background-color: $bg_color;
  background-image: url(#{$image_url});
  background-repeat: $bg_repeat;
  background-position: $x_pos $y_pos;
  background-size: $img_width $img_height;
  @media
  only screen and (min--moz-device-pixel-ratio: 1.5),
  only screen and (-webkit-min-device-pixel-ratio: 1.5),
  only screen and (min-device-pixel-ratio: 1.5) {
    background-image: url(#{$image_url2});
  }
}

@mixin retina-cover($bg_color, $image_url, $bg_repeat, $x_pos, $y_pos, $image_url2){
  background-color: $bg_color;
  background-image: url(#{$image_url});
  background-repeat: $bg_repeat;
  background-position: $x_pos $y_pos;
  background-size: cover;
  @media
  only screen and (min--moz-device-pixel-ratio: 1.5),
  only screen and (-webkit-min-device-pixel-ratio: 1.5),
  only screen and (min-device-pixel-ratio: 1.5) {
    background-image: url(#{$image_url2});
  }
}

/* Transformations */

@mixin translate($x:0, $y:0){
  -webkit-transform: translate($x, $y);
  -ms-transform: translate($x, $y);
  transform: translate($x, $y);
}

@mixin scale($ratio:1.5){
  -webkit-transform:scale($ratio);
  transform: scale($ratio);
}

@mixin rotate($degree:1deg){
  -webkit-transform: rotate($degree);
  -moz-transform: rotate($degree);
  -ms-transform: rotate($degree);
  transform: rotate($degree);
}

@mixin transition($delay:250ms, $transition_style:ease-out){
  transition: all $delay $transition_style;
}

@mixin transform-origin($origin_x, $origin_y){
  -ms-transform-origin: $origin_x $origin_y;
  -webkit-transform-origin: $origin_x $origin_y;
  transform-origin: $origin_x $origin_y;
}

/* Gradients */

@mixin gradient($from: #000, $to: #fff){
  background: -webkit-linear-gradient($from, $to);
  background: linear-gradient($from, $to);
}

@mixin horizontal-gradient($from: #000, $to: #fff){
  background: -webkit-linear-gradient(left, $from, $to);
  background: linear-gradient(to right, $from, $to);
}

/* Inputs */

@mixin placeholder-color($placeholder_text_color: #000){
  &::-webkit-input-placeholder {
    color: $placeholder_text_color;
  }
  &:-moz-placeholder {
    color: $placeholder_text_color;
    opacity: 1;
  }
  &::-moz-placeholder {
    color: $placeholder_text_color;
    opacity: 1;
  }
  &:-ms-input-placeholder {
    color: $placeholder_text_color;
  }
}

/* Animation */

@mixin animation($name:my_animation, $duration:1s, $timing_function:ease, $delay:0, $iteration_count:1, $direction:normal, $fill_mode:none, $play_state:running){
  animation-name: $name;
  animation-duration: $duration;
  animation-timing-function: $timing_function;
  animation-delay: $delay;
  animation-iteration-count: $iteration_count;
  animation-direction: $direction;
  animation-fill-mode: $fill_mode;
  animation-play-state: $play_state;

  -webkit-animation-name: $name;
  -webkit-animation-duration: $duration;
  -webkit-animation-timing-function: $timing_function;
  -webkit-animation-delay: $delay;
  -webkit-animation-iteration-count: $iteration_count;
  -webkit-animation-direction: $direction;
  -webkit-animation-fill-mode: $fill_mode;
  -webkit-animation-play-state: $play_state;

  /*
  @name
  Specifies the name of the keyframe you want to bind to the selector

  @duration
  (Defined in seconds (s) or milliseconds (ms). Default is 0)
  Specifies how many seconds or milliseconds an animation takes to complete

  @timing_function
  (linear|ease|ease-in|ease-out|ease-in-out)
  Specifies the speed curve of the animation

  @delay
  (Defined in seconds (s) or milliseconds (ms). Default is 0)
  Specifies a delay before the animation will start

  @iteration_count
  (1,2,3...|infinite)
  (A number that defines how many times an animation should be played. Default is 1)
  Specifies how many times an animation should be played

  @direction
  (normal|reverse|alternate|alternate-reverse)
  Specifies whether or not the animation should play in reverse on alternate cycles. If the animation is set to play only once, this property will have no effect.

  @fill_mode
  (none|forwards|backwards|both)
  Specifies what values are applied by the animation outside the time it is executing (when it is finished, or when it has a "delay"). By default, CSS animations will not affect the element you are animating until the first keyframe is "played", and then stops affecting it once the last keyframe has completed. The animation-fill-mode property can override this behavior. Animate something moving from one place to another and have it stay there: forwards.

  @play_state
  (paused|running)
  Specifies whether the animation is running or paused
  */
}